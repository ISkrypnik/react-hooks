{"version":3,"sources":["components/create.js","components/UpdateModalWindow.js","components/read.js","App.js","reportWebVitals.js","index.js"],"names":["Create","useState","firstName","setFirstName","lastName","setLastName","checkbox","setCheckbox","console","log","Form","className","Field","placeholder","onChange","e","target","value","Checkbox","label","Button","onClick","axios","post","then","type","UpdateModalWindow","data","refreshData","open","setOpen","id","setId","processId","setProcessId","transformationType","setTransformationType","transformationOrder","setTransformationOrder","useEffect","localStorage","getItem","Modal","basic","onClose","onOpen","size","trigger","Header","icon","Icon","name","Content","Actions","color","inverted","put","Read","transformationData","setTransformationData","get","response","useCallback","setItem","getData","onDelete","delete","Table","singleLine","Row","HeaderCell","Body","map","currentTransformation","Cell","App","exact","path","component","style","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a53b31b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Checkbox, Form } from 'semantic-ui-react'\nimport axios from 'axios';\n\nexport default function Create() {\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [checkbox, setCheckbox] = useState(false);\n    console.log(checkbox)\n\n    const postData = () => {\n        axios.post(`https://60fbca4591156a0017b4c8a7.mockapi.io/fakeData`, {\n            firstName,\n            lastName,\n            checkbox\n        }).then(() => {\n        })\n    }\n\n    return (\n        <div>\n            <Form className=\"create-form\">\n                <Form.Field>\n                    <label>First Name</label>\n                    <input placeholder='First Name' onChange={(e) => setFirstName(e.target.value)}/>\n                </Form.Field>\n                <Form.Field>\n                    <label>Last Name</label>\n                    <input placeholder='Last Name' onChange={(e) => setLastName(e.target.value)}/>\n                </Form.Field>\n                <Form.Field>\n                    <Checkbox label='I agree to the Terms and Conditions' onChange={(e) => setCheckbox(!checkbox)}/>\n                </Form.Field>\n                <Button onClick={postData} type='submit'>Submit</Button>\n            </Form>\n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react';\nimport {Button, Form, Header, Icon, Modal} from 'semantic-ui-react'\nimport axios from 'axios';\n\nfunction UpdateModalWindow(data, refreshData) {\n    const [open, setOpen] = useState(false);\n\n    const [id, setId] = useState('');\n    const [processId, setProcessId] = useState('');\n    const [transformationType, setTransformationType] = useState('');\n    const [transformationOrder, setTransformationOrder] = useState('');\n\n    useEffect(() => {\n        setId(localStorage.getItem('ID'));\n        setProcessId(localStorage.getItem('Process id'));\n        setTransformationType(localStorage.getItem('Transformation type'));\n        setTransformationOrder(localStorage.getItem('Transformation order'));\n    }, []);\n\n    const updateTransformation = () => {\n        axios.put(`https://61ee3db5d593d20017dbace7.mockapi.io/transformations/${id}`, {\n            processId,\n            transformationType,\n            transformationOrder\n        }).then(() => {\n            console.log('Updated')\n        })\n    }\n\n    const setData = () => {\n        setId(data.data.id);\n        setProcessId(data.data.processId);\n        setTransformationType(data.data.transformationType);\n        setTransformationOrder(data.data.transformationOrder);\n    }\n\n    return (\n        <Modal\n            basic\n            onClose={() => setOpen(false)}\n            onOpen={() => setOpen(true)}\n            open={open}\n            size='small'\n            trigger={<Button onClick={setData}>Update</Button>}\n        >\n            <Header icon>\n                <Icon name='edit'/>\n                Edit Transformation\n            </Header>\n            <Modal.Content>\n                <Form className=\"edit-form\">\n                    <Form.Field>\n                        <label>Process id</label>\n                        <input placeholder='Process id' value={processId}\n                               onChange={(e) => setProcessId(e.target.value)}/>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Transformation type</label>\n                        <input placeholder='Transformation type' value={transformationType}\n                               onChange={(e) => setTransformationType(e.target.value)}/>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Transformation order</label>\n                        <input placeholder='Transformation order' value={transformationOrder}\n                               onChange={(e) => setTransformationOrder(e.target.value)}/>\n                    </Form.Field>\n                </Form>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button key='cancel' basic color='red' inverted onClick={() => setOpen(false)}>\n                    <Icon name='cancel'/> Cancel\n                </Button>\n                <Button key='save' color='green' inverted onClick={() => {\n                    refreshData();\n                    updateTransformation();\n                    setOpen(false);\n                }}>\n                    <Icon name='save'/> Save\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    )\n}\n\nexport default UpdateModalWindow;","import axios from 'axios';\nimport React, {useCallback, useEffect, useState} from 'react';\nimport {Table, Button} from 'semantic-ui-react';\nimport UpdateModalWindow from './UpdateModalWindow'\n\nfunction Read() {\n    const [transformationData, setTransformationData] = useState([]);\n\n    useEffect(() => {\n        axios.get(`https://61ee3db5d593d20017dbace7.mockapi.io/transformations`)\n            .then((response) => {\n                console.log(response.data)\n                setTransformationData(response.data);\n            })\n    }, []);\n\n    const setData = useCallback((data) => {\n        let { id, processId, transformationType, transformationOrder } = data;\n        localStorage.setItem('ID', id);\n        localStorage.setItem('Process id', processId);\n        localStorage.setItem('Transformation type', transformationType);\n        localStorage.setItem('Transformation order', transformationOrder);\n    }, [])\n\n    const getData = () => {\n        axios.get(`https://61ee3db5d593d20017dbace7.mockapi.io/transformations`)\n            .then((getData) => {\n                setTransformationData(getData.data);\n            })\n    }\n\n    const refreshData = () => {\n        axios.get(`https://61ee3db5d593d20017dbace7.mockapi.io/transformations`)\n            .then((getData) => {\n                setTransformationData(getData.data);\n            })\n    }\n\n    const onDelete = (id) => {\n        axios.delete(`https://61ee3db5d593d20017dbace7.mockapi.io/transformations/${id}`)\n        .then(() => {\n            getData();\n        })\n    }\n\n    return (\n        <div>\n            <Table key='read-transformations-table' singleLine>\n                <Table.Header key='read-transformations-header'>\n                    <Table.Row key='read-transformations-header-row'>\n                        <Table.HeaderCell key='read-transformations-header-cell-id'>ID</Table.HeaderCell>\n                        <Table.HeaderCell key='read-transformations-header-cell-process-id'>Process id</Table.HeaderCell>\n                        <Table.HeaderCell key='read-transformations-header-cell-type'>Transformation type</Table.HeaderCell>\n                        <Table.HeaderCell key='read-transformations-header-cell-order'>Transformation order</Table.HeaderCell>\n                        <Table.HeaderCell key='read-transformations-header-cell-btn-update'>Update</Table.HeaderCell>\n                        <Table.HeaderCell key='read-transformations-header-cell-btn-delete'>Delete</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body key='read-transformations-body'>\n                    {transformationData.map((currentTransformation) => {\n                        return (\n                            <Table.Row key={currentTransformation.id}>\n                                <Table.Cell key='read-transformation-cell-id'>{currentTransformation.id}</Table.Cell>\n                                <Table.Cell key='read-transformation-cell-processId'>{currentTransformation.processId}</Table.Cell>\n                                <Table.Cell key='read-transformation-cell-transformationType'>{currentTransformation.transformationType}</Table.Cell>\n                                <Table.Cell key='read-transformation-cell-transformationOrder'>{currentTransformation.transformationOrder}</Table.Cell>\n                                <Table.Cell key='read-transformation-cell-update'>\n                                    <UpdateModalWindow\n                                        key={currentTransformation.id}\n                                        data={currentTransformation}\n                                        refreshData={refreshData}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell key='read-transformations-cell-delete'>\n                                    <Button key={currentTransformation.id} onClick={() => onDelete(currentTransformation.id)}>Delete</Button>\n                                </Table.Cell>\n                            </Table.Row>\n                        )\n                    })}\n                </Table.Body>\n            </Table>\n        </div>\n    )\n}\n\nexport default Read;\n","import './App.css';\nimport Create from './components/create';\nimport Read from './components/read';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"main\">\n        <h2 className=\"main-header\">React Crud Operations</h2>\n        <div>\n          <Route exact path='/create' component={Create} />\n        </div>\n        <div style={{ marginTop: 20 }}>\n          <Route exact path='/read' component={Read} />\n        </div>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}